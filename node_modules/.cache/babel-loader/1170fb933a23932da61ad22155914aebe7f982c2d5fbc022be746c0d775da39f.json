{"ast":null,"code":"import { spawn, SUBSCRIBE, UNSUBSCRIBE, send, subscriber } from '@onflow/util-actor';\n\n/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nfunction invariant$1(fact, msg) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`);\n    error.stack = error.stack.split(\"\\n\").filter(d => !/at invariant/.test(d)).join(\"\\n\");\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\");\n    throw error;\n  }\n}\nconst pipe$1 = function () {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return func(res);\n    }, v);\n  };\n};\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param {...function(*): object} funcs - Functions to merge\n * @return {object} - Merged object\n */\nconst mergePipe$1 = function () {\n  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    funcs[_key2] = arguments[_key2];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return {\n        ...res,\n        ...func(v)\n      };\n    }, {});\n  };\n};\n\n/**\n * @description Object check\n * @param {*} value - Value to check\n * @returns {boolean} - Is object status\n */\nconst isObject$1 = value => value && typeof value === \"object\" && !Array.isArray(value);\n\n/**\n * @description Deep merge multiple objects.\n * @param {object} target - Target object\n * @param {...object[]} sources - Source objects\n * @returns {object} - Merged object\n */\nconst mergeDeep$1 = function (target) {\n  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    sources[_key3 - 1] = arguments[_key3];\n  }\n  if (!sources.length) return target;\n  const source = sources.shift();\n  if (isObject$1(target) && isObject$1(source)) {\n    for (const key in source) {\n      if (isObject$1(source[key])) {\n        if (!target[key]) Object.assign(target, {\n          [key]: {}\n        });\n        mergeDeep$1(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep$1(target, ...sources);\n};\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {object} - Merged Flow JSON\n */\nconst mergeFlowJSONs$1 = value => Array.isArray(value) ? mergeDeep$1({}, ...value) : value;\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param {object|object[]} obj - Flow JSON or array of Flow JSONs\n * @returns {object} - Contracts section of Flow JSON\n */\nconst filterContracts$1 = obj => obj.contracts ? obj.contracts : {};\n\n/**\n * @description Gathers contract addresses by network\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress$1 = network => contracts => {\n  return Object.entries(contracts).reduce((c, _ref) => {\n    let [key, value] = _ref;\n    const networkContractAlias = value?.aliases?.[network];\n    if (networkContractAlias) {\n      c[key] = networkContractAlias;\n    }\n    return c;\n  }, {});\n};\nconst mapDeploymentsToNetworkAddress$1 = network => _ref2 => {\n  let {\n    deployments = {},\n    accounts = {}\n  } = _ref2;\n  const networkDeployment = deployments?.[network];\n  if (!networkDeployment) return {};\n  return Object.entries(networkDeployment).reduce((c, _ref3) => {\n    let [key, value] = _ref3;\n    // Resolve account address\n    const accountAddress = accounts[key]?.address;\n    if (!accountAddress) return c;\n\n    // Create an object assigning the address to the contract name.\n    return value.reduce((c, contract) => {\n      return {\n        ...c,\n        [contract]: accountAddress\n      };\n    }, {});\n  }, {});\n};\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst getContracts$1 = (jsons, network) => {\n  return pipe$1(mergeFlowJSONs$1, mergePipe$1(mapDeploymentsToNetworkAddress$1(network), pipe$1(filterContracts$1, mapContractAliasesToNetworkAddress$1(network))))(jsons);\n};\n\n/**\n * @description Checks if string is hexidecimal\n * @param {string} str - String to check\n * @returns {boolean} - Is hexidecimal status\n */\nconst isHexidecimal$1 = str => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false;\n  return /^[0-9A-Fa-f]+$/.test(str);\n};\n\n/**\n * @description Checks flow.json file for private keys\n * @param {object} flowJSON - Flow JSON\n * @returns {boolean} - Has private keys status\n */\nconst hasPrivateKeys$1 = flowJSON => {\n  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {\n    let [key, value] = _ref4;\n    if (hasPrivateKey) return true;\n    return value?.hasOwnProperty(\"key\") && isHexidecimal$1(value?.key);\n  }, false);\n};\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {boolean} - Has private keys status\n */\nconst anyHasPrivateKeys$1 = value => {\n  if (isObject$1(value)) return hasPrivateKeys$1(value);\n  return value.some(hasPrivateKeys$1);\n};\n\n/**\n * @description Format network to always be 'emulator', 'testnet', or 'mainnet'\n * @param {string} network - Network to format\n * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')\n */\nconst cleanNetwork$1 = network => network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase();\nconst NAME$1 = \"config\";\nconst PUT$1 = \"PUT_CONFIG\";\nconst GET$1 = \"GET_CONFIG\";\nconst GET_ALL$1 = \"GET_ALL_CONFIG\";\nconst UPDATE$1 = \"UPDATE_CONFIG\";\nconst DELETE$1 = \"DELETE_CONFIG\";\nconst CLEAR$1 = \"CLEAR_CONFIG\";\nconst WHERE$1 = \"WHERE_CONFIG\";\nconst UPDATED$1 = \"CONFIG/UPDATED\";\nconst identity$1 = v => v;\nconst HANDLERS$1 = {\n  [PUT$1]: (ctx, _letter, _ref) => {\n    let {\n      key,\n      value\n    } = _ref;\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\");\n    ctx.put(key, value);\n    ctx.broadcast(UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [GET$1]: (ctx, letter, _ref2) => {\n    let {\n      key,\n      fallback\n    } = _ref2;\n    if (key == null) throw new Error(\"Missing 'key' for config/get\");\n    letter.reply(ctx.get(key, fallback));\n  },\n  [GET_ALL$1]: (ctx, letter) => {\n    letter.reply({\n      ...ctx.all()\n    });\n  },\n  [UPDATE$1]: (ctx, letter, _ref3) => {\n    let {\n      key,\n      fn\n    } = _ref3;\n    if (key == null) throw new Error(\"Missing 'key' for config/update\");\n    ctx.update(key, fn || identity$1);\n    ctx.broadcast(UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [DELETE$1]: (ctx, letter, _ref4) => {\n    let {\n      key\n    } = _ref4;\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\");\n    ctx.delete(key);\n    ctx.broadcast(UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [CLEAR$1]: (ctx, letter) => {\n    let keys = Object.keys(ctx.all());\n    for (let key of keys) ctx.delete(key);\n    ctx.broadcast(UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [WHERE$1]: (ctx, letter, _ref5) => {\n    let {\n      pattern\n    } = _ref5;\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\");\n    letter.reply(ctx.where(pattern));\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED$1, {\n      ...ctx.all()\n    });\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  }\n};\nspawn(HANDLERS$1, NAME$1);\n\n/**\n * @description Adds a key-value pair to the config\n * @param {string} key - The key to add\n * @param {*} value - The value to add\n * @returns {Promise<object>} - The current config\n */\nfunction put$1(key, value) {\n  send(NAME$1, PUT$1, {\n    key,\n    value\n  });\n  return config$1();\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param {string} key - The key to add\n * @param {*} [fallback] - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nfunction get$1(key, fallback) {\n  return send(NAME$1, GET$1, {\n    key,\n    fallback\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param {string[]} wants - The keys to search for\n * @param {*} fallback - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nasync function first$1() {\n  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fallback = arguments.length > 1 ? arguments[1] : undefined;\n  if (!wants.length) return fallback;\n  const [head, ...rest] = wants;\n  const ret = await get$1(head);\n  if (ret == null) return first$1(rest, fallback);\n  return ret;\n}\n\n/**\n * @description Returns the current config\n * @returns {Promise<object>} - The current config\n */\nfunction all$1() {\n  return send(NAME$1, GET_ALL$1, null, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param {string} key - The key to update\n * @param {Function} fn - The function to update the value with\n * @returns {Promise<object>} - The current config\n */\nfunction update$1(key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity$1;\n  send(NAME$1, UPDATE$1, {\n    key,\n    fn\n  });\n  return config$1();\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param {string} key - The key to delete\n * @returns {Promise<object>} - The current config\n */\nfunction _delete$1(key) {\n  send(NAME$1, DELETE$1, {\n    key\n  });\n  return config$1();\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param {string} pattern - The pattern to match keys against\n * @returns {Promise<object>} - The subset of the config\n */\nfunction where$1(pattern) {\n  return send(NAME$1, WHERE$1, {\n    pattern\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Subscribes to config updates\n * @param {Function} callback - The callback to call when config is updated\n * @returns {Function} - The unsubscribe function\n */\nfunction subscribe$1(callback) {\n  return subscriber(NAME$1, () => spawn(HANDLERS$1, NAME$1), callback);\n}\n\n/**\n * @description Clears the config\n * @returns {void}\n */\nfunction clearConfig$1() {\n  return send(NAME$1, CLEAR$1);\n}\n\n/**\n * @description Resets the config to a previous state\n * @param {object} oldConfig - The previous config state\n * @returns {Promise<object>} - The current config\n */\nfunction resetConfig$1(oldConfig) {\n  return clearConfig$1().then(config$1(oldConfig));\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param {object|object[]} data - The flow.json or array of flow.json files\n * @returns {void}\n */\nasync function load$1(data) {\n  const network = await get$1(\"flow.network\");\n  const cleanedNetwork = cleanNetwork$1(network);\n  const {\n    flowJSON\n  } = data;\n  invariant$1(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\");\n  invariant$1(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);\n  if (anyHasPrivateKeys$1(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\";\n    log({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? LEVELS.warn : LEVELS.error\n    });\n    if (!isEmulator) return;\n  }\n  for (const [key, value] of Object.entries(getContracts$1(flowJSON, cleanedNetwork))) {\n    const contractConfigKey = `0x${key}`;\n    const existingContractConfigKey = await get$1(contractConfigKey);\n    if (existingContractConfigKey && existingContractConfigKey !== value) {\n      log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS.warn\n      });\n    } else {\n      put$1(contractConfigKey, value);\n    }\n    const systemContractConfigKey = `system.contracts.${key}`;\n    const systemExistingContractConfigKeyValue = await get$1(systemContractConfigKey);\n    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {\n      log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS.warn\n      });\n    } else {\n      put$1(systemContractConfigKey, value);\n    }\n  }\n}\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @description Sets the config\n * @param {object} [values] - The values to set\n */\nfunction config$1(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put$1(d, values[d]));\n  }\n  return {\n    put: put$1,\n    get: get$1,\n    all: all$1,\n    first: first$1,\n    update: update$1,\n    delete: _delete$1,\n    where: where$1,\n    subscribe: subscribe$1,\n    overload: overload$1,\n    load: load$1\n  };\n}\nconfig$1.put = put$1;\nconfig$1.get = get$1;\nconfig$1.all = all$1;\nconfig$1.first = first$1;\nconfig$1.update = update$1;\nconfig$1.delete = _delete$1;\nconfig$1.where = where$1;\nconfig$1.subscribe = subscribe$1;\nconfig$1.overload = overload$1;\nconfig$1.load = load$1;\nconst noop$1 = v => v;\nfunction overload$1() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop$1;\n  return new Promise(async (resolve, reject) => {\n    const oldConfig = await all$1();\n    try {\n      config$1(opts);\n      var result = await callback(await all$1());\n      await resetConfig$1(oldConfig);\n      resolve(result);\n    } catch (error) {\n      await resetConfig$1(oldConfig);\n      reject(error);\n    }\n  });\n}\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nconst LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1\n});\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = _ref => {\n  let {\n    title,\n    message\n  } = _ref;\n  return [`\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `.replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(),, \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nconst log = async _ref2 => {\n  let {\n    title,\n    message,\n    level,\n    always = false\n  } = _ref2;\n  const configLoggerLevel = await config$1.get(\"logger.level\", LEVELS.warn);\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return;\n  const loggerMessageArgs = buildLoggerMessageArgs({\n    title,\n    message\n  });\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs);\n      break;\n    case LEVELS.info:\n      console.info(...loggerMessageArgs);\n      break;\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs);\n      break;\n    case LEVELS.error:\n      console.error(...loggerMessageArgs);\n      break;\n    default:\n      console.log(...loggerMessageArgs);\n  }\n};\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = _ref3 => {\n  let {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null\n  } = _ref3;\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  const logMessage = () => log({\n    title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n    message: `\n      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? \" of \" + pkg : \"\"}.` : \"\"}${message ? \"\\n\" + message : \"\"}${transition ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}` : \"\"}\n    `.trim(),\n    level\n  });\n  if (typeof callback === \"function\") {\n    return async function () {\n      await logMessage();\n      return await callback(...arguments);\n    };\n  }\n  return logMessage();\n};\n\n/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nfunction invariant(fact, msg) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`);\n    error.stack = error.stack.split(\"\\n\").filter(d => !/at invariant/.test(d)).join(\"\\n\");\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\");\n    throw error;\n  }\n}\nconst pipe = function () {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return func(res);\n    }, v);\n  };\n};\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param {...function(*): object} funcs - Functions to merge\n * @return {object} - Merged object\n */\nconst mergePipe = function () {\n  for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    funcs[_key2] = arguments[_key2];\n  }\n  return v => {\n    return funcs.reduce((res, func) => {\n      return {\n        ...res,\n        ...func(v)\n      };\n    }, {});\n  };\n};\n\n/**\n * @description Object check\n * @param {*} value - Value to check\n * @returns {boolean} - Is object status\n */\nconst isObject = value => value && typeof value === \"object\" && !Array.isArray(value);\n\n/**\n * @description Deep merge multiple objects.\n * @param {object} target - Target object\n * @param {...object[]} sources - Source objects\n * @returns {object} - Merged object\n */\nconst mergeDeep = function (target) {\n  for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    sources[_key3 - 1] = arguments[_key3];\n  }\n  if (!sources.length) return target;\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, {\n          [key]: {}\n        });\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  return mergeDeep(target, ...sources);\n};\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {object} - Merged Flow JSON\n */\nconst mergeFlowJSONs = value => Array.isArray(value) ? mergeDeep({}, ...value) : value;\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param {object|object[]} obj - Flow JSON or array of Flow JSONs\n * @returns {object} - Contracts section of Flow JSON\n */\nconst filterContracts = obj => obj.contracts ? obj.contracts : {};\n\n/**\n * @description Gathers contract addresses by network\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress = network => contracts => {\n  return Object.entries(contracts).reduce((c, _ref) => {\n    let [key, value] = _ref;\n    const networkContractAlias = value?.aliases?.[network];\n    if (networkContractAlias) {\n      c[key] = networkContractAlias;\n    }\n    return c;\n  }, {});\n};\nconst mapDeploymentsToNetworkAddress = network => _ref2 => {\n  let {\n    deployments = {},\n    accounts = {}\n  } = _ref2;\n  const networkDeployment = deployments?.[network];\n  if (!networkDeployment) return {};\n  return Object.entries(networkDeployment).reduce((c, _ref3) => {\n    let [key, value] = _ref3;\n    // Resolve account address\n    const accountAddress = accounts[key]?.address;\n    if (!accountAddress) return c;\n\n    // Create an object assigning the address to the contract name.\n    return value.reduce((c, contract) => {\n      return {\n        ...c,\n        [contract]: accountAddress\n      };\n    }, {});\n  }, {});\n};\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst getContracts = (jsons, network) => {\n  return pipe(mergeFlowJSONs, mergePipe(mapDeploymentsToNetworkAddress(network), pipe(filterContracts, mapContractAliasesToNetworkAddress(network))))(jsons);\n};\n\n/**\n * @description Checks if string is hexidecimal\n * @param {string} str - String to check\n * @returns {boolean} - Is hexidecimal status\n */\nconst isHexidecimal = str => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false;\n  return /^[0-9A-Fa-f]+$/.test(str);\n};\n\n/**\n * @description Checks flow.json file for private keys\n * @param {object} flowJSON - Flow JSON\n * @returns {boolean} - Has private keys status\n */\nconst hasPrivateKeys = flowJSON => {\n  return Object.entries(flowJSON?.accounts).reduce((hasPrivateKey, _ref4) => {\n    let [key, value] = _ref4;\n    if (hasPrivateKey) return true;\n    return value?.hasOwnProperty(\"key\") && isHexidecimal(value?.key);\n  }, false);\n};\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {boolean} - Has private keys status\n */\nconst anyHasPrivateKeys = value => {\n  if (isObject(value)) return hasPrivateKeys(value);\n  return value.some(hasPrivateKeys);\n};\n\n/**\n * @description Format network to always be 'emulator', 'testnet', or 'mainnet'\n * @param {string} network - Network to format\n * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')\n */\nconst cleanNetwork = network => network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase();\nconst NAME = \"config\";\nconst PUT = \"PUT_CONFIG\";\nconst GET = \"GET_CONFIG\";\nconst GET_ALL = \"GET_ALL_CONFIG\";\nconst UPDATE = \"UPDATE_CONFIG\";\nconst DELETE = \"DELETE_CONFIG\";\nconst CLEAR = \"CLEAR_CONFIG\";\nconst WHERE = \"WHERE_CONFIG\";\nconst UPDATED = \"CONFIG/UPDATED\";\nconst identity = v => v;\nconst HANDLERS = {\n  [PUT]: (ctx, _letter, _ref) => {\n    let {\n      key,\n      value\n    } = _ref;\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\");\n    ctx.put(key, value);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [GET]: (ctx, letter, _ref2) => {\n    let {\n      key,\n      fallback\n    } = _ref2;\n    if (key == null) throw new Error(\"Missing 'key' for config/get\");\n    letter.reply(ctx.get(key, fallback));\n  },\n  [GET_ALL]: (ctx, letter) => {\n    letter.reply({\n      ...ctx.all()\n    });\n  },\n  [UPDATE]: (ctx, letter, _ref3) => {\n    let {\n      key,\n      fn\n    } = _ref3;\n    if (key == null) throw new Error(\"Missing 'key' for config/update\");\n    ctx.update(key, fn || identity);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [DELETE]: (ctx, letter, _ref4) => {\n    let {\n      key\n    } = _ref4;\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\");\n    ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [CLEAR]: (ctx, letter) => {\n    let keys = Object.keys(ctx.all());\n    for (let key of keys) ctx.delete(key);\n    ctx.broadcast(UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [WHERE]: (ctx, letter, _ref5) => {\n    let {\n      pattern\n    } = _ref5;\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\");\n    letter.reply(ctx.where(pattern));\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED, {\n      ...ctx.all()\n    });\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  }\n};\nspawn(HANDLERS, NAME);\n\n/**\n * @description Adds a key-value pair to the config\n * @param {string} key - The key to add\n * @param {*} value - The value to add\n * @returns {Promise<object>} - The current config\n */\nfunction put(key, value) {\n  send(NAME, PUT, {\n    key,\n    value\n  });\n  return config();\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param {string} key - The key to add\n * @param {*} [fallback] - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nfunction get(key, fallback) {\n  return send(NAME, GET, {\n    key,\n    fallback\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param {string[]} wants - The keys to search for\n * @param {*} fallback - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nasync function first() {\n  let wants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let fallback = arguments.length > 1 ? arguments[1] : undefined;\n  if (!wants.length) return fallback;\n  const [head, ...rest] = wants;\n  const ret = await get(head);\n  if (ret == null) return first(rest, fallback);\n  return ret;\n}\n\n/**\n * @description Returns the current config\n * @returns {Promise<object>} - The current config\n */\nfunction all() {\n  return send(NAME, GET_ALL, null, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param {string} key - The key to update\n * @param {Function} fn - The function to update the value with\n * @returns {Promise<object>} - The current config\n */\nfunction update(key) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : identity;\n  send(NAME, UPDATE, {\n    key,\n    fn\n  });\n  return config();\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param {string} key - The key to delete\n * @returns {Promise<object>} - The current config\n */\nfunction _delete(key) {\n  send(NAME, DELETE, {\n    key\n  });\n  return config();\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param {string} pattern - The pattern to match keys against\n * @returns {Promise<object>} - The subset of the config\n */\nfunction where(pattern) {\n  return send(NAME, WHERE, {\n    pattern\n  }, {\n    expectReply: true,\n    timeout: 10\n  });\n}\n\n/**\n * @description Subscribes to config updates\n * @param {Function} callback - The callback to call when config is updated\n * @returns {Function} - The unsubscribe function\n */\nfunction subscribe(callback) {\n  return subscriber(NAME, () => spawn(HANDLERS, NAME), callback);\n}\n\n/**\n * @description Clears the config\n * @returns {void}\n */\nfunction clearConfig() {\n  return send(NAME, CLEAR);\n}\n\n/**\n * @description Resets the config to a previous state\n * @param {object} oldConfig - The previous config state\n * @returns {Promise<object>} - The current config\n */\nfunction resetConfig(oldConfig) {\n  return clearConfig().then(config(oldConfig));\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param {object|object[]} data - The flow.json or array of flow.json files\n * @returns {void}\n */\nasync function load(data) {\n  const network = await get(\"flow.network\");\n  const cleanedNetwork = cleanNetwork(network);\n  const {\n    flowJSON\n  } = data;\n  invariant(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\");\n  invariant(cleanedNetwork, `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`);\n  if (anyHasPrivateKeys(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\";\n    log({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? LEVELS.warn : LEVELS.error\n    });\n    if (!isEmulator) return;\n  }\n  for (const [key, value] of Object.entries(getContracts(flowJSON, cleanedNetwork))) {\n    const contractConfigKey = `0x${key}`;\n    const existingContractConfigKey = await get(contractConfigKey);\n    if (existingContractConfigKey && existingContractConfigKey !== value) {\n      log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS.warn\n      });\n    } else {\n      put(contractConfigKey, value);\n    }\n    const systemContractConfigKey = `system.contracts.${key}`;\n    const systemExistingContractConfigKeyValue = await get(systemContractConfigKey);\n    if (systemExistingContractConfigKeyValue && systemExistingContractConfigKeyValue !== value) {\n      log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: LEVELS.warn\n      });\n    } else {\n      put(systemContractConfigKey, value);\n    }\n  }\n}\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @description Sets the config\n * @param {object} [values] - The values to set\n */\nfunction config(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put(d, values[d]));\n  }\n  return {\n    put,\n    get,\n    all,\n    first,\n    update,\n    delete: _delete,\n    where,\n    subscribe,\n    overload,\n    load\n  };\n}\nconfig.put = put;\nconfig.get = get;\nconfig.all = all;\nconfig.first = first;\nconfig.update = update;\nconfig.delete = _delete;\nconfig.where = where;\nconfig.subscribe = subscribe;\nconfig.overload = overload;\nconfig.load = load;\nconst noop = v => v;\nfunction overload() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  return new Promise(async (resolve, reject) => {\n    const oldConfig = await all();\n    try {\n      config(opts);\n      var result = await callback(await all());\n      await resetConfig(oldConfig);\n      resolve(result);\n    } catch (error) {\n      await resetConfig(oldConfig);\n      reject(error);\n    }\n  });\n}\nexport { clearConfig, config };","map":{"version":3,"names":["invariant$1","fact","msg","error","Error","stack","split","filter","d","test","join","_len","arguments","length","rest","Array","_key","console","LEVELS","Object","freeze","debug","info","log","warn","buildLoggerMessageArgs","_ref","title","message","replace","trim","_ref2","level","always","configLoggerLevel","config$1","get","loggerMessageArgs","deprecate","_ref3","pkg","subject","transition","callback","capitalizeFirstLetter","string","charAt","toUpperCase","slice","logMessage","invariant","pipe","funcs","v","reduce","res","func","mergePipe","_len2","_key2","isObject","value","isArray","mergeDeep","target","_len3","sources","_key3","source","shift","key","assign","mergeFlowJSONs","filterContracts","obj","contracts","mapContractAliasesToNetworkAddress","network","entries","c","networkContractAlias","aliases","mapDeploymentsToNetworkAddress","deployments","accounts","networkDeployment","accountAddress","address","contract","getContracts","jsons","isHexidecimal","str","hasPrivateKeys","flowJSON","hasPrivateKey","_ref4","hasOwnProperty","anyHasPrivateKeys","some","cleanNetwork","toLowerCase","NAME","PUT","GET","GET_ALL","UPDATE","DELETE","CLEAR","WHERE","UPDATED","identity","HANDLERS","ctx","_letter","put","broadcast","all","letter","fallback","reply","fn","update","delete","keys","_ref5","pattern","where","SUBSCRIBE","subscribe","from","send","UNSUBSCRIBE","unsubscribe","spawn","config","expectReply","timeout","first","wants","undefined","head","ret","_delete","subscriber","clearConfig","resetConfig","oldConfig","then","load","data","cleanedNetwork","Boolean","isEmulator","contractConfigKey","existingContractConfigKey","systemContractConfigKey","systemExistingContractConfigKeyValue","values","map","overload","noop","opts","Promise","resolve","reject","result"],"sources":["/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@onflow/util-invariant/src/index.js","/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@onflow/util-logger/src/util-logger.js","/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@onflow/config/utils/utils.js","/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@onflow/config/src/config.js"],"sourcesContent":["/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nexport function invariant(fact, msg, ...rest) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`)\n    error.stack = error.stack\n      .split(\"\\n\")\n      .filter(d => !/at invariant/.test(d))\n      .join(\"\\n\")\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\")\n    throw error\n  }\n}\n","import {config} from \"@onflow/config\"\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nexport const LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1,\n})\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = ({title, message}) => {\n  return [\n    `\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `\n      .replace(/\\n[^\\S\\r\\n]+/g, \"\\n\")\n      .trim(),\n    ,\n    \"font-weight:bold;font-family:monospace;\",\n  ]\n}\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nexport const log = async ({title, message, level, always = false}) => {\n  const configLoggerLevel = await config.get(\"logger.level\", LEVELS.warn)\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return\n\n  const loggerMessageArgs = buildLoggerMessageArgs({title, message})\n\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs)\n      break\n    case LEVELS.info:\n      console.info(...loggerMessageArgs)\n      break\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs)\n      break\n    case LEVELS.error:\n      console.error(...loggerMessageArgs)\n      break\n    default:\n      console.log(...loggerMessageArgs)\n  }\n}\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = ({\n  pkg,\n  subject,\n  transition,\n  level = LEVELS.warn,\n  message = \"\",\n  callback = null,\n}) => {\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n  }\n\n  const logMessage = () =>\n    log({\n      title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n      message: `\n      ${\n        subject\n          ? `${capitalizeFirstLetter(\n              subject\n            )} is deprecated and will cease to work in future releases${\n              pkg ? \" of \" + pkg : \"\"\n            }.`\n          : \"\"\n      }${message ? \"\\n\" + message : \"\"}${\n        transition\n          ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}`\n          : \"\"\n      }\n    `.trim(),\n      level,\n    })\n\n  if (typeof callback === \"function\") {\n    return async (...args) => {\n      await logMessage()\n      return await callback(...args)\n    }\n  }\n  return logMessage()\n}\n","const pipe =\n  (...funcs) =>\n  v => {\n    return funcs.reduce((res, func) => {\n      return func(res)\n    }, v)\n  }\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param {...function(*): object} funcs - Functions to merge\n * @return {object} - Merged object\n */\nconst mergePipe =\n  (...funcs) =>\n  v => {\n    return funcs.reduce((res, func) => {\n      return {...res, ...func(v)}\n    }, {})\n  }\n\n/**\n * @description Object check\n * @param {*} value - Value to check\n * @returns {boolean} - Is object status\n */\nconst isObject = value =>\n  value && typeof value === \"object\" && !Array.isArray(value)\n\n/**\n * @description Deep merge multiple objects.\n * @param {object} target - Target object\n * @param {...object[]} sources - Source objects\n * @returns {object} - Merged object\n */\nconst mergeDeep = (target, ...sources) => {\n  if (!sources.length) return target\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, {[key]: {}})\n        mergeDeep(target[key], source[key])\n      } else {\n        Object.assign(target, {[key]: source[key]})\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources)\n}\n\n/**\n * @description Support if/then/else behavior in a function way.\n * @param {function(object): boolean} testFn - Function to test\n * @param {function(object): *} posCond - Function to run if testFn is true\n * @param {function(object): *} negCond - Function to run it testFn is false\n * @returns {function(*): *} - Function that returns the result of posCond or negCond\n */\nexport const ifElse = (testFn, posCond, negCond) => obj =>\n  testFn(obj) ? posCond(obj) : negCond(obj)\n\n/**\n * @description Deep merge multiple Flow JSON.\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {object} - Merged Flow JSON\n */\nconst mergeFlowJSONs = value =>\n  Array.isArray(value) ? mergeDeep({}, ...value) : value\n\n/**\n * @description Filter out contracts section of flow.json.\n * @param {object|object[]} obj - Flow JSON or array of Flow JSONs\n * @returns {object} - Contracts section of Flow JSON\n */\nconst filterContracts = obj => (obj.contracts ? obj.contracts : {})\n\n/**\n * @description Gathers contract addresses by network\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress = network => contracts => {\n  return Object.entries(contracts).reduce((c, [key, value]) => {\n    const networkContractAlias = value?.aliases?.[network]\n    if (networkContractAlias) {\n      c[key] = networkContractAlias\n    }\n\n    return c\n  }, {})\n}\n\nconst mapDeploymentsToNetworkAddress =\n  network =>\n  ({deployments = {}, accounts = {}}) => {\n    const networkDeployment = deployments?.[network]\n    if (!networkDeployment) return {}\n\n    return Object.entries(networkDeployment).reduce((c, [key, value]) => {\n      // Resolve account address\n      const accountAddress = accounts[key]?.address\n      if (!accountAddress) return c\n\n      // Create an object assigning the address to the contract name.\n      return value.reduce((c, contract) => {\n        return {...c, [contract]: accountAddress}\n      }, {})\n    }, {})\n  }\n\n/**\n * @description Take in flow.json files and return contract to address mapping by network\n * @param {object|object[]} jsons - Flow JSON or array of Flow JSONs\n * @param {string} network - Network to gather addresses for\n * @returns {object} - Contract names by addresses mapping e.g { \"HelloWorld\": \"0x123\" }\n */\nexport const getContracts = (jsons, network) => {\n  return pipe(\n    mergeFlowJSONs,\n    mergePipe(\n      mapDeploymentsToNetworkAddress(network),\n      pipe(filterContracts, mapContractAliasesToNetworkAddress(network))\n    )\n  )(jsons)\n}\n\n/**\n * @description Checks if string is hexidecimal\n * @param {string} str - String to check\n * @returns {boolean} - Is hexidecimal status\n */\nconst isHexidecimal = str => {\n  // Check that it is a string\n  if (typeof str !== \"string\") return false\n  return /^[0-9A-Fa-f]+$/.test(str)\n}\n\n/**\n * @description Checks flow.json file for private keys\n * @param {object} flowJSON - Flow JSON\n * @returns {boolean} - Has private keys status\n */\nconst hasPrivateKeys = flowJSON => {\n  return Object.entries(flowJSON?.accounts).reduce(\n    (hasPrivateKey, [key, value]) => {\n      if (hasPrivateKey) return true\n      return value?.hasOwnProperty(\"key\") && isHexidecimal(value?.key)\n    },\n    false\n  )\n}\n\n/**\n * @description Take in flow.json or array of flow.json files and checks for private keys\n * @param {object|object[]} value - Flow JSON or array of Flow JSONs\n * @returns {boolean} - Has private keys status\n */\nexport const anyHasPrivateKeys = value => {\n  if (isObject(value)) return hasPrivateKeys(value)\n  return value.some(hasPrivateKeys)\n}\n\n/**\n * @description Format network to always be 'emulator', 'testnet', or 'mainnet'\n * @param {string} network - Network to format\n * @returns {string} - Formatted network name (either 'emulator', 'testnet', or 'mainnet')\n */\nexport const cleanNetwork = network =>\n  network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase()\n","import {\n  spawn,\n  send,\n  subscriber,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n} from \"@onflow/util-actor\"\nimport * as logger from \"@onflow/util-logger\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {getContracts, cleanNetwork, anyHasPrivateKeys} from \"../utils/utils\"\n\nconst NAME = \"config\"\nconst PUT = \"PUT_CONFIG\"\nconst GET = \"GET_CONFIG\"\nconst GET_ALL = \"GET_ALL_CONFIG\"\nconst UPDATE = \"UPDATE_CONFIG\"\nconst DELETE = \"DELETE_CONFIG\"\nconst CLEAR = \"CLEAR_CONFIG\"\nconst WHERE = \"WHERE_CONFIG\"\nconst UPDATED = \"CONFIG/UPDATED\"\n\nconst identity = v => v\n\nconst HANDLERS = {\n  [PUT]: (ctx, _letter, {key, value}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\")\n    ctx.put(key, value)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [GET]: (ctx, letter, {key, fallback}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/get\")\n    letter.reply(ctx.get(key, fallback))\n  },\n  [GET_ALL]: (ctx, letter) => {\n    letter.reply({...ctx.all()})\n  },\n  [UPDATE]: (ctx, letter, {key, fn}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/update\")\n    ctx.update(key, fn || identity)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [DELETE]: (ctx, letter, {key}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\")\n    ctx.delete(key)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [CLEAR]: (ctx, letter) => {\n    let keys = Object.keys(ctx.all())\n    for (let key of keys) ctx.delete(key)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [WHERE]: (ctx, letter, {pattern}) => {\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\")\n    letter.reply(ctx.where(pattern))\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, {...ctx.all()})\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n}\n\nspawn(HANDLERS, NAME)\n\n/**\n * @description Adds a key-value pair to the config\n * @param {string} key - The key to add\n * @param {*} value - The value to add\n * @returns {Promise<object>} - The current config\n */\nfunction put(key, value) {\n  send(NAME, PUT, {key, value})\n  return config()\n}\n\n/**\n * @description Gets a key-value pair with a fallback from the config\n * @param {string} key - The key to add\n * @param {*} [fallback] - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nfunction get(key, fallback) {\n  return send(NAME, GET, {key, fallback}, {expectReply: true, timeout: 10})\n}\n\n/**\n * @description Returns the first non null config value or the fallback\n * @param {string[]} wants - The keys to search for\n * @param {*} fallback - The fallback value to return if key is not found\n * @returns {Promise<*>} - The value found at key or fallback\n */\nasync function first(wants = [], fallback) {\n  if (!wants.length) return fallback\n  const [head, ...rest] = wants\n  const ret = await get(head)\n  if (ret == null) return first(rest, fallback)\n  return ret\n}\n\n/**\n * @description Returns the current config\n * @returns {Promise<object>} - The current config\n */\nfunction all() {\n  return send(NAME, GET_ALL, null, {expectReply: true, timeout: 10})\n}\n\n/**\n * @description Updates a key-value pair in the config\n * @param {string} key - The key to update\n * @param {Function} fn - The function to update the value with\n * @returns {Promise<object>} - The current config\n */\nfunction update(key, fn = identity) {\n  send(NAME, UPDATE, {key, fn})\n  return config()\n}\n\n/**\n * @description Deletes a key-value pair from the config\n * @param {string} key - The key to delete\n * @returns {Promise<object>} - The current config\n */\nfunction _delete(key) {\n  send(NAME, DELETE, {key})\n  return config()\n}\n\n/**\n * @description Returns a subset of the config based on a pattern\n * @param {string} pattern - The pattern to match keys against\n * @returns {Promise<object>} - The subset of the config\n */\nfunction where(pattern) {\n  return send(NAME, WHERE, {pattern}, {expectReply: true, timeout: 10})\n}\n\n/**\n * @description Subscribes to config updates\n * @param {Function} callback - The callback to call when config is updated\n * @returns {Function} - The unsubscribe function\n */\nfunction subscribe(callback) {\n  return subscriber(NAME, () => spawn(HANDLERS, NAME), callback)\n}\n\n/**\n * @description Clears the config\n * @returns {void}\n */\nexport function clearConfig() {\n  return send(NAME, CLEAR)\n}\n\n/**\n * @description Resets the config to a previous state\n * @param {object} oldConfig - The previous config state\n * @returns {Promise<object>} - The current config\n */\nfunction resetConfig(oldConfig) {\n  return clearConfig().then(config(oldConfig))\n}\n\n/**\n * @description Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param {object|object[]} data - The flow.json or array of flow.json files\n * @returns {void}\n */\nasync function load(data) {\n  const network = await get(\"flow.network\")\n  const cleanedNetwork = cleanNetwork(network)\n  const {flowJSON} = data\n\n  invariant(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\")\n\n  invariant(\n    cleanedNetwork,\n    `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`\n  )\n\n  if (anyHasPrivateKeys(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\"\n\n    logger.log({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? logger.LEVELS.warn : logger.LEVELS.error,\n    })\n\n    if (!isEmulator) return\n  }\n\n  for (const [key, value] of Object.entries(\n    getContracts(flowJSON, cleanedNetwork)\n  )) {\n    const contractConfigKey = `0x${key}`\n    const existingContractConfigKey = await get(contractConfigKey)\n    if (existingContractConfigKey && existingContractConfigKey !== value) {\n      logger.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: logger.LEVELS.warn,\n      })\n    } else {\n      put(contractConfigKey, value)\n    }\n\n    const systemContractConfigKey = `system.contracts.${key}`\n    const systemExistingContractConfigKeyValue = await get(\n      systemContractConfigKey\n    )\n    if (\n      systemExistingContractConfigKeyValue &&\n      systemExistingContractConfigKeyValue !== value\n    ) {\n      logger.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: logger.LEVELS.warn,\n      })\n    } else {\n      put(systemContractConfigKey, value)\n    }\n  }\n}\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @description Sets the config\n * @param {object} [values] - The values to set\n */\nfunction config(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put(d, values[d]))\n  }\n\n  return {\n    put,\n    get,\n    all,\n    first,\n    update,\n    delete: _delete,\n    where,\n    subscribe,\n    overload,\n    load,\n  }\n}\n\nconfig.put = put\nconfig.get = get\nconfig.all = all\nconfig.first = first\nconfig.update = update\nconfig.delete = _delete\nconfig.where = where\nconfig.subscribe = subscribe\nconfig.overload = overload\nconfig.load = load\n\nexport {config}\n\nconst noop = v => v\nfunction overload(opts = {}, callback = noop) {\n  return new Promise(async (resolve, reject) => {\n    const oldConfig = await all()\n    try {\n      config(opts)\n      var result = await callback(await all())\n      await resetConfig(oldConfig)\n      resolve(result)\n    } catch (error) {\n      await resetConfig(oldConfig)\n      reject(error)\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}