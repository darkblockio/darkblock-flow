{"ast":null,"code":"import _regeneratorRuntime from \"/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { config } from '@onflow/config';\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nvar LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1\n});\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nvar buildLoggerMessageArgs = function buildLoggerMessageArgs(_ref) {\n  var title = _ref.title,\n    message = _ref.message;\n  return [\"\\n    %c\".concat(title, \"\\n    ============================\\n\\n    \").concat(message, \"\\n\\n    ============================\\n    \").replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(),, \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nvar log = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n    var _console, _console2, _console3, _console4, _console5;\n    var title, message, level, _ref2$always, always, configLoggerLevel, loggerMessageArgs;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          title = _ref2.title, message = _ref2.message, level = _ref2.level, _ref2$always = _ref2.always, always = _ref2$always === void 0 ? false : _ref2$always;\n          _context.next = 3;\n          return config.get(\"logger.level\", LEVELS.warn);\n        case 3:\n          configLoggerLevel = _context.sent;\n          if (!(!always && configLoggerLevel < level)) {\n            _context.next = 6;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 6:\n          loggerMessageArgs = buildLoggerMessageArgs({\n            title: title,\n            message: message\n          });\n          _context.t0 = level;\n          _context.next = _context.t0 === LEVELS.debug ? 10 : _context.t0 === LEVELS.info ? 12 : _context.t0 === LEVELS.warn ? 14 : _context.t0 === LEVELS.error ? 16 : 18;\n          break;\n        case 10:\n          (_console = console).debug.apply(_console, _toConsumableArray(loggerMessageArgs));\n          return _context.abrupt(\"break\", 19);\n        case 12:\n          (_console2 = console).info.apply(_console2, _toConsumableArray(loggerMessageArgs));\n          return _context.abrupt(\"break\", 19);\n        case 14:\n          (_console3 = console).warn.apply(_console3, _toConsumableArray(loggerMessageArgs));\n          return _context.abrupt(\"break\", 19);\n        case 16:\n          (_console4 = console).error.apply(_console4, _toConsumableArray(loggerMessageArgs));\n          return _context.abrupt(\"break\", 19);\n        case 18:\n          (_console5 = console).log.apply(_console5, _toConsumableArray(loggerMessageArgs));\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function log(_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = function (_ref3) {\n  var pkg = _ref3.pkg,\n    subject = _ref3.subject,\n    transition = _ref3.transition,\n    _ref3$level = _ref3.level,\n    level = _ref3$level === void 0 ? LEVELS.warn : _ref3$level,\n    _ref3$message = _ref3.message,\n    message = _ref3$message === void 0 ? \"\" : _ref3$message,\n    _ref3$callback = _ref3.callback,\n    callback = _ref3$callback === void 0 ? null : _ref3$callback;\n  var capitalizeFirstLetter = function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  var logMessage = function logMessage() {\n    return log({\n      title: \"\".concat(pkg ? pkg + \" \" : \"\", \"Deprecation Notice\"),\n      message: \"\\n      \".concat(subject ? \"\".concat(capitalizeFirstLetter(subject), \" is deprecated and will cease to work in future releases\").concat(pkg ? \" of \" + pkg : \"\", \".\") : \"\").concat(message ? \"\\n\" + message : \"\").concat(transition ? \"\\nYou can learn more (including a guide on common transition paths) here: \".concat(transition) : \"\", \"\\n    \").trim(),\n      level: level\n    });\n  };\n  if (typeof callback === \"function\") {\n    return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return logMessage();\n          case 2:\n            _context2.next = 4;\n            return callback.apply(void 0, _args2);\n          case 4:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n  }\n  return logMessage();\n};\nexport { LEVELS, log };","map":{"version":3,"names":["LEVELS","Object","freeze","debug","info","log","warn","error","buildLoggerMessageArgs","_ref","title","message","concat","replace","trim","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref2","_console","_console2","_console3","_console4","_console5","level","_ref2$always","always","configLoggerLevel","loggerMessageArgs","wrap","_callee$","_context","prev","next","config","get","sent","abrupt","t0","console","apply","_toConsumableArray","stop","_x","arguments","deprecate","_ref3","pkg","subject","transition","_ref3$level","_ref3$message","_ref3$callback","callback","capitalizeFirstLetter","string","charAt","toUpperCase","slice","logMessage","_callee2","_args2","_callee2$","_context2"],"sources":["/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@onflow/util-logger/src/util-logger.js"],"sourcesContent":["import {config} from \"@onflow/config\"\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nexport const LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1,\n})\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = ({title, message}) => {\n  return [\n    `\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `\n      .replace(/\\n[^\\S\\r\\n]+/g, \"\\n\")\n      .trim(),\n    ,\n    \"font-weight:bold;font-family:monospace;\",\n  ]\n}\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nexport const log = async ({title, message, level, always = false}) => {\n  const configLoggerLevel = await config.get(\"logger.level\", LEVELS.warn)\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return\n\n  const loggerMessageArgs = buildLoggerMessageArgs({title, message})\n\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs)\n      break\n    case LEVELS.info:\n      console.info(...loggerMessageArgs)\n      break\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs)\n      break\n    case LEVELS.error:\n      console.error(...loggerMessageArgs)\n      break\n    default:\n      console.log(...loggerMessageArgs)\n  }\n}\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = ({\n  pkg,\n  subject,\n  transition,\n  level = LEVELS.warn,\n  message = \"\",\n  callback = null,\n}) => {\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n  }\n\n  const logMessage = () =>\n    log({\n      title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n      message: `\n      ${\n        subject\n          ? `${capitalizeFirstLetter(\n              subject\n            )} is deprecated and will cease to work in future releases${\n              pkg ? \" of \" + pkg : \"\"\n            }.`\n          : \"\"\n      }${message ? \"\\n\" + message : \"\"}${\n        transition\n          ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}`\n          : \"\"\n      }\n    `.trim(),\n      level,\n    })\n\n  if (typeof callback === \"function\") {\n    return async (...args) => {\n      await logMessage()\n      return await callback(...args)\n    }\n  }\n  return logMessage()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}