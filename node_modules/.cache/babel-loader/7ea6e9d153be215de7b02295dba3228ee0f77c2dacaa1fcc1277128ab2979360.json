{"ast":null,"code":"import _regeneratorRuntime from\"/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3;// import * as fcl from \"@onflow/fcl\";\n// import { useState, useEffect } from \"react\";\n// import styled from \"styled-components\";\n// import { Fragment } from \"react\";\n// import Modal from \"./Modal\";\n// const Wrapper = styled.div`\n//   background-color: #e5e5e5;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n//   align-items: center;\n//   justify-content: center;\n//   padding: 50px;\n//   button {\n//     width: 100px;\n//     padding: 10px;\n//     border: none;\n//     background-color: #8dfe89;\n//     border-radius: 10px;\n//     font-weight: 700;\n//     &:hover {\n//       color: white;\n//       background-color: black;\n//       cursor: pointer;\n//     }\n//   }\n//   section {\n//     display: flex;\n//     justify-content: center;\n//     align-items: center;\n//     flex-wrap: wrap;\n//     gap: 30px;\n//     padding: 10%;\n//   }\n//   .nftDiv{\n//     padding: 10px;\n//     background-color: #141414;\n//     border-radius: 20px;\n//     color: white;\n//     box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n//     img{\n//         width: 140px;\n//         border-radius: 10px;\n//     }\n//     p{\n//         font-size: 14px;\n//     }\n//   }\n//   button.nftDiv {\n//     border: none;\n//     background: none;\n//     cursor: pointer;\n//     padding: 10px;\n//     background-color: #141414;\n//     border-radius: 20px;\n//     color: white;\n//     box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n//     display: flex;\n//     flex-direction: column;\n//     align-items: center;\n//     justify-content: center;\n//     gap: 10px;\n//     width: 140px; // adjust as necessary\n//   }\n//   button.nftDiv img {\n//     width: 100%;\n//     border-radius: 10px;\n//   }\n//   button.nftDiv p {\n//     font-size: 14px;\n//   }\n// `;\n// export default function ShowNfts() {\n//   const [nfts, setNfts] = useState([]);\n//   const [user, setUser] = useState({ loggedIn: false, addr: undefined });\n//   const [selectedNft, setSelectedNft] = useState(null);\n// \tuseEffect(() => {\n//     fcl.currentUser.subscribe(setUser);\n//     getNFTs(user.addr)\n//   }, [user.addr]);\n//   async function getNFTs(addr) {\n//     try {\n//       const result = await fcl.query({\n//         cadence: `\n//                 import FlowTutorialMint from 0x0822a39d2b1cb404\n//                 import MetadataViews from 0x631e88ae7f1d7c20\n//                 pub fun main(address: Address): [FlowTutorialMint.FlowTutorialMintData] {\n//                   let collection = getAccount(address).getCapability(FlowTutorialMint.CollectionPublicPath)\n//                                     .borrow<&{MetadataViews.ResolverCollection}>()\n//                                     ?? panic(\"Could not borrow a reference to the nft collection\")\n//                   let ids = collection.getIDs()\n//                   let answer: [FlowTutorialMint.FlowTutorialMintData] = []\n//                   for id in ids {\n//                     let nft = collection.borrowViewResolver(id: id)\n//                     let view = nft.resolveView(Type<FlowTutorialMint.FlowTutorialMintData>())!\n//                     let display = view as! FlowTutorialMint.FlowTutorialMintData\n//                     answer.append(display)\n//                   }\n//                   return answer\n//                 }\n//                 `,\n//         args: (arg, t) => [arg(addr, t.Address)],\n//       });\n//       setNfts(result);\n//     } catch (error) {\n//       console.log(\"err\", error);\n//     }\n//   }\n//   const handleNftClick = (nftId) => {\n//     setSelectedNft(nftId);\n//   };\n//   const handleCloseModal = () => {\n//     setSelectedNft(null);\n//   };\n//   return (\n//     <Wrapper>\n//       <h1>My NFTs</h1>\n//       <main>\n//         <button onClick={() => getNFTs(user.addr)}>Get NFTs</button>\n//         <section>\n//           {nfts.map((nft, index) => {\n//             return (\n//               <button key={index} className=\"nftDiv\" onClick={() => handleNftClick(nft.id)}>\n//                 <img src={nft.url} alt=\"nft\" />\n//                 <p>Type: {nft.type}</p>\n//                 <p>Id: {nft.id}</p>\n//               </button>\n//             );\n//           })}\n//         </section>\n//       </main>\n//       {selectedNft && (\n//         <Modal nftId={selectedNft} onClose={handleCloseModal} />\n//       )}\n//     </Wrapper>\n//   );\n// }\nimport*as fcl from\"@onflow/fcl\";import{useState,useEffect}from\"react\";import styled from\"styled-components\";import Modal from\"./Modal\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Wrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  \\n  display: flex;\\n  flex-direction: column;\\n  gap: 10px;\\n  align-items: center;\\n  justify-content: center;\\n  padding: 150px;\\n\\n  button {\\n    width: 100px;\\n    padding: 10px;\\n    border: none;\\n    background-color: #8dfe89;\\n    border-radius: 10px;\\n    font-weight: 700;\\n    &:hover {\\n      color: white;\\n      background-color: black;\\n      cursor: pointer;\\n    }\\n  }\\n\\n  section {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    flex-wrap: wrap;\\n    gap: 30px;\\n    \\n  }\\n\\n  .nftDiv{\\n    \\n    background-color: #141414;\\n    border-radius: 20px;\\n    color: white;\\n    \\n    img{\\n        width: 140px;\\n        border-radius: 10px;\\n    }\\n    p{\\n        font-size: 14px;\\n    }\\n  }\\n\\n  button.nftDiv {\\n    border: none;\\n    background: none;\\n    cursor: pointer;\\n    padding: 10px;\\n    background-color: #141414;\\n    border-radius: 20px;\\n    color: white;\\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    justify-content: center;\\n    gap: 10px;\\n    width: 140px; // adjust as necessary\\n  }\\n  \\n  button.nftDiv img {\\n    width: 100%;\\n    border-radius: 10px;\\n  }\\n  \\n  button.nftDiv p {\\n    font-size: 14px;\\n  }\\n  \\n\"])));var IframeContainer=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  position: relative;\\n  width: 100%; // This will make the iframe responsive\\n  padding-top: 56.25%; // This is based on the aspect ratio 16:9 (9/16 = 0.5625)\\n  margin-bottom: 100px;\\n  overflow: hidden;\\n\\n  iframe {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    border: none; // This line removes the border\\n  }\\n\"])));var Overlay=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0); // Semi-transparent overlay\\n  display: flex;\\n  z-index: 9;\\n  justify-content: center;\\n  align-items: center;\\n  cursor: not-allowed;\\n\"])));export default function ShowNfts(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),nfts=_useState2[0],setNfts=_useState2[1];var _useState3=useState({loggedIn:false,addr:undefined}),_useState4=_slicedToArray(_useState3,2),user=_useState4[0],setUser=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),selectedNft=_useState6[0],setSelectedNft=_useState6[1];useEffect(function(){fcl.currentUser.subscribe(setUser);getNFTs(user.addr);},[user.addr]);function getNFTs(_x){return _getNFTs.apply(this,arguments);}function _getNFTs(){_getNFTs=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(addr){var result;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fcl.query({cadence:\"\\n                import FlowTutorialMint from 0x0822a39d2b1cb404\\n                import MetadataViews from 0x631e88ae7f1d7c20\\n                \\n                pub fun main(address: Address): [FlowTutorialMint.FlowTutorialMintData] {\\n                  let collection = getAccount(address).getCapability(FlowTutorialMint.CollectionPublicPath)\\n                                    .borrow<&{MetadataViews.ResolverCollection}>()\\n                                    ?? panic(\\\"Could not borrow a reference to the nft collection\\\")\\n                \\n                  let ids = collection.getIDs()\\n                \\n                  let answer: [FlowTutorialMint.FlowTutorialMintData] = []\\n                \\n                  for id in ids {\\n                    \\n                    let nft = collection.borrowViewResolver(id: id)\\n                    let view = nft.resolveView(Type<FlowTutorialMint.FlowTutorialMintData>())!\\n                \\n                    let display = view as! FlowTutorialMint.FlowTutorialMintData\\n                    answer.append(display)\\n                  }\\n                    \\n                  return answer\\n                }\\n                \",args:function args(arg,t){return[arg(addr,t.Address)];}});case 3:result=_context.sent;setNfts(result);_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.log(\"err\",_context.t0);case 10:case\"end\":return _context.stop();}},_callee,null,[[0,7]]);}));return _getNFTs.apply(this,arguments);}var handleCloseModal=function handleCloseModal(){setSelectedNft(null);};var handleOverlayClick=function handleOverlayClick(){if(nfts.length===0){alert('You need to mint the NFT to access.');}};var contracAddress=\"0x0822a39d2b1cb404\";var iframeSrc=\"https://staging.darkblock.io/platform/flow/embed/nft/\".concat(contracAddress,\"/2/<epoch>_<signature>/<address>\");return/*#__PURE__*/_jsxs(Wrapper,{children:[/*#__PURE__*/_jsx(\"h1\",{style:{},children:\"Token-bound Content\"}),/*#__PURE__*/_jsxs(IframeContainer,{children:[/*#__PURE__*/_jsx(\"iframe\",{src:iframeSrc,title:\"NFT\",width:\"100%\",height:\"100%\"}),nfts.length===0&&/*#__PURE__*/_jsx(Overlay,{onClick:handleOverlayClick})]}),selectedNft&&/*#__PURE__*/_jsx(Modal,{nftId:selectedNft,onClose:handleCloseModal})]});}","map":{"version":3,"names":["fcl","useState","useEffect","styled","Modal","jsx","_jsx","jsxs","_jsxs","Wrapper","div","_templateObject","_taggedTemplateLiteral","IframeContainer","_templateObject2","Overlay","_templateObject3","ShowNfts","_useState","_useState2","_slicedToArray","nfts","setNfts","_useState3","loggedIn","addr","undefined","_useState4","user","setUser","_useState5","_useState6","selectedNft","setSelectedNft","currentUser","subscribe","getNFTs","_x","_getNFTs","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_callee$","_context","prev","next","query","cadence","args","arg","t","Address","sent","t0","console","log","stop","handleCloseModal","handleOverlayClick","length","alert","contracAddress","iframeSrc","concat","children","style","src","title","width","height","onClick","nftId","onClose"],"sources":["/Users/oqpo/Documents/GitHub/darkblock-flow/src/components/ShowNfts.jsx"],"sourcesContent":["// import * as fcl from \"@onflow/fcl\";\n// import { useState, useEffect } from \"react\";\n// import styled from \"styled-components\";\n// import { Fragment } from \"react\";\n// import Modal from \"./Modal\";\n\n// const Wrapper = styled.div`\n//   background-color: #e5e5e5;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n//   align-items: center;\n//   justify-content: center;\n//   padding: 50px;\n\n//   button {\n//     width: 100px;\n//     padding: 10px;\n//     border: none;\n//     background-color: #8dfe89;\n//     border-radius: 10px;\n//     font-weight: 700;\n//     &:hover {\n//       color: white;\n//       background-color: black;\n//       cursor: pointer;\n//     }\n//   }\n\n//   section {\n//     display: flex;\n//     justify-content: center;\n//     align-items: center;\n//     flex-wrap: wrap;\n//     gap: 30px;\n//     padding: 10%;\n//   }\n\n//   .nftDiv{\n//     padding: 10px;\n//     background-color: #141414;\n//     border-radius: 20px;\n//     color: white;\n//     box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n//     img{\n//         width: 140px;\n//         border-radius: 10px;\n//     }\n//     p{\n//         font-size: 14px;\n//     }\n//   }\n\n//   button.nftDiv {\n//     border: none;\n//     background: none;\n//     cursor: pointer;\n//     padding: 10px;\n//     background-color: #141414;\n//     border-radius: 20px;\n//     color: white;\n//     box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n//     display: flex;\n//     flex-direction: column;\n//     align-items: center;\n//     justify-content: center;\n//     gap: 10px;\n//     width: 140px; // adjust as necessary\n//   }\n  \n//   button.nftDiv img {\n//     width: 100%;\n//     border-radius: 10px;\n//   }\n  \n//   button.nftDiv p {\n//     font-size: 14px;\n//   }\n  \n// `;\n\n// export default function ShowNfts() {\n//   const [nfts, setNfts] = useState([]);\n//   const [user, setUser] = useState({ loggedIn: false, addr: undefined });\n//   const [selectedNft, setSelectedNft] = useState(null);\n\n// \tuseEffect(() => {\n//     fcl.currentUser.subscribe(setUser);\n//     getNFTs(user.addr)\n//   }, [user.addr]);\n\n//   async function getNFTs(addr) {\n//     try {\n//       const result = await fcl.query({\n//         cadence: `\n//                 import FlowTutorialMint from 0x0822a39d2b1cb404\n//                 import MetadataViews from 0x631e88ae7f1d7c20\n                \n//                 pub fun main(address: Address): [FlowTutorialMint.FlowTutorialMintData] {\n//                   let collection = getAccount(address).getCapability(FlowTutorialMint.CollectionPublicPath)\n//                                     .borrow<&{MetadataViews.ResolverCollection}>()\n//                                     ?? panic(\"Could not borrow a reference to the nft collection\")\n                \n//                   let ids = collection.getIDs()\n                \n//                   let answer: [FlowTutorialMint.FlowTutorialMintData] = []\n                \n//                   for id in ids {\n                    \n//                     let nft = collection.borrowViewResolver(id: id)\n//                     let view = nft.resolveView(Type<FlowTutorialMint.FlowTutorialMintData>())!\n                \n//                     let display = view as! FlowTutorialMint.FlowTutorialMintData\n//                     answer.append(display)\n//                   }\n                    \n//                   return answer\n//                 }\n//                 `,\n//         args: (arg, t) => [arg(addr, t.Address)],\n//       });\n//       setNfts(result);\n//     } catch (error) {\n//       console.log(\"err\", error);\n//     }\n//   }\n\n//   const handleNftClick = (nftId) => {\n//     setSelectedNft(nftId);\n//   };\n\n//   const handleCloseModal = () => {\n//     setSelectedNft(null);\n//   };\n\n\n//   return (\n//     <Wrapper>\n//       <h1>My NFTs</h1>\n//       <main>\n//         <button onClick={() => getNFTs(user.addr)}>Get NFTs</button>\n//         <section>\n//           {nfts.map((nft, index) => {\n//             return (\n//               <button key={index} className=\"nftDiv\" onClick={() => handleNftClick(nft.id)}>\n//                 <img src={nft.url} alt=\"nft\" />\n//                 <p>Type: {nft.type}</p>\n//                 <p>Id: {nft.id}</p>\n//               </button>\n//             );\n//           })}\n//         </section>\n//       </main>\n  \n//       {selectedNft && (\n//         <Modal nftId={selectedNft} onClose={handleCloseModal} />\n//       )}\n//     </Wrapper>\n//   );\n  \n  \n// }\n\n\n\n\nimport * as fcl from \"@onflow/fcl\";\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Modal from \"./Modal\";\n\nconst Wrapper = styled.div`\n  \n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n  padding: 150px;\n\n  button {\n    width: 100px;\n    padding: 10px;\n    border: none;\n    background-color: #8dfe89;\n    border-radius: 10px;\n    font-weight: 700;\n    &:hover {\n      color: white;\n      background-color: black;\n      cursor: pointer;\n    }\n  }\n\n  section {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 30px;\n    \n  }\n\n  .nftDiv{\n    \n    background-color: #141414;\n    border-radius: 20px;\n    color: white;\n    \n    img{\n        width: 140px;\n        border-radius: 10px;\n    }\n    p{\n        font-size: 14px;\n    }\n  }\n\n  button.nftDiv {\n    border: none;\n    background: none;\n    cursor: pointer;\n    padding: 10px;\n    background-color: #141414;\n    border-radius: 20px;\n    color: white;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    width: 140px; // adjust as necessary\n  }\n  \n  button.nftDiv img {\n    width: 100%;\n    border-radius: 10px;\n  }\n  \n  button.nftDiv p {\n    font-size: 14px;\n  }\n  \n`;\n\nconst IframeContainer = styled.div`\n  position: relative;\n  width: 100%; // This will make the iframe responsive\n  padding-top: 56.25%; // This is based on the aspect ratio 16:9 (9/16 = 0.5625)\n  margin-bottom: 100px;\n  overflow: hidden;\n\n  iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: none; // This line removes the border\n  }\n`;\n\n\n\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0); // Semi-transparent overlay\n  display: flex;\n  z-index: 9;\n  justify-content: center;\n  align-items: center;\n  cursor: not-allowed;\n`;\n\n\nexport default function ShowNfts() {\n  const [nfts, setNfts] = useState([]);\n  const [user, setUser] = useState({ loggedIn: false, addr: undefined });\n  const [selectedNft, setSelectedNft] = useState(null);\n\n  useEffect(() => {\n    fcl.currentUser.subscribe(setUser);\n    getNFTs(user.addr);\n  }, [user.addr]);\n\n  async function getNFTs(addr) {\n    try {\n      const result = await fcl.query({\n        cadence: `\n                import FlowTutorialMint from 0x0822a39d2b1cb404\n                import MetadataViews from 0x631e88ae7f1d7c20\n                \n                pub fun main(address: Address): [FlowTutorialMint.FlowTutorialMintData] {\n                  let collection = getAccount(address).getCapability(FlowTutorialMint.CollectionPublicPath)\n                                    .borrow<&{MetadataViews.ResolverCollection}>()\n                                    ?? panic(\"Could not borrow a reference to the nft collection\")\n                \n                  let ids = collection.getIDs()\n                \n                  let answer: [FlowTutorialMint.FlowTutorialMintData] = []\n                \n                  for id in ids {\n                    \n                    let nft = collection.borrowViewResolver(id: id)\n                    let view = nft.resolveView(Type<FlowTutorialMint.FlowTutorialMintData>())!\n                \n                    let display = view as! FlowTutorialMint.FlowTutorialMintData\n                    answer.append(display)\n                  }\n                    \n                  return answer\n                }\n                `,\n        args: (arg, t) => [arg(addr, t.Address)],\n      });\n      \n      setNfts(result);\n    } catch (error) {\n      console.log(\"err\", error);\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSelectedNft(null);\n  };\n\n  const handleOverlayClick = () => {\n    if (nfts.length === 0) {\n      alert('You need to mint the NFT to access.');\n    }\n  };\n\n  const contracAddress = \"0x0822a39d2b1cb404\";\n  const iframeSrc = `https://staging.darkblock.io/platform/flow/embed/nft/${contracAddress}/2/<epoch>_<signature>/<address>`;\n\n  return (\n    <Wrapper>\n      <h1 style={{}}>Token-bound Content</h1>\n      <IframeContainer>\n        <iframe src={iframeSrc} title=\"NFT\" width=\"100%\" height=\"100%\"></iframe>\n        {nfts.length === 0 && (\n          <Overlay onClick={handleOverlayClick}></Overlay>\n        )}\n      </IframeContainer>\n\n      {selectedNft && (\n        <Modal nftId={selectedNft} onClose={handleCloseModal} />\n      )}\n    </Wrapper>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}