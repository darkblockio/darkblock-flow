{"ast":null,"code":"/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nfunction invariant(fact, msg) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`);\n    error.stack = error.stack.split(\"\\n\").filter(d => !/at invariant/.test(d)).join(\"\\n\");\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\");\n    throw error;\n  }\n}\nexport { invariant };","map":{"version":3,"names":["invariant","fact","msg","error","Error","stack","split","filter","d","test","join","_len","arguments","length","rest","Array","_key","console"],"sources":["/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@onflow/util-invariant/src/index.js"],"sourcesContent":["/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nexport function invariant(fact, msg, ...rest) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`)\n    error.stack = error.stack\n      .split(\"\\n\")\n      .filter(d => !/at invariant/.test(d))\n      .join(\"\\n\")\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\")\n    throw error\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,SAASA,CAACC,IAAI,EAAEC,GAAG,EAAW;EAC5C,IAAI,CAACD,IAAI,EAAE;IACT,MAAME,KAAK,GAAG,IAAIC,KAAK,CAAc,aAAAF,GAAI,EAAC,CAAC;IAC3CC,KAAK,CAACE,KAAK,GAAGF,KAAK,CAACE,KAAK,CACtBC,KAAK,CAAC,IAAI,CAAC,CACXC,MAAM,CAACC,CAAC,IAAI,CAAC,cAAc,CAACC,IAAI,CAACD,CAAC,CAAC,CAAC,CACpCE,IAAI,CAAC,IAAI,CAAC;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EANuBC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAOxCC,OAAO,CAACd,KAAK,CAAC,aAAa,EAAEA,KAAK,EAAE,MAAM,EAAE,GAAGW,IAAI,EAAE,aAAa,CAAC;IACnE,MAAMX,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}