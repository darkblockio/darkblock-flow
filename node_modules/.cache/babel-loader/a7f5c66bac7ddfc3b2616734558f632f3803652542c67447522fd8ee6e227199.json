{"ast":null,"code":"var _jsxFileName = \"/Users/oqpo/Documents/GitHub/darkblock-flow/src/components/ShowNfts.jsx\",\n  _s = $RefreshSig$();\n// import * as fcl from \"@onflow/fcl\";\n// import { useState, useEffect } from \"react\";\n// import styled from \"styled-components\";\n// import { Fragment } from \"react\";\n// import Modal from \"./Modal\";\n\n// const Wrapper = styled.div`\n//   background-color: #e5e5e5;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n//   align-items: center;\n//   justify-content: center;\n//   padding: 50px;\n\n//   button {\n//     width: 100px;\n//     padding: 10px;\n//     border: none;\n//     background-color: #8dfe89;\n//     border-radius: 10px;\n//     font-weight: 700;\n//     &:hover {\n//       color: white;\n//       background-color: black;\n//       cursor: pointer;\n//     }\n//   }\n\n//   section {\n//     display: flex;\n//     justify-content: center;\n//     align-items: center;\n//     flex-wrap: wrap;\n//     gap: 30px;\n//     padding: 10%;\n//   }\n\n//   .nftDiv{\n//     padding: 10px;\n//     background-color: #141414;\n//     border-radius: 20px;\n//     color: white;\n//     box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n//     img{\n//         width: 140px;\n//         border-radius: 10px;\n//     }\n//     p{\n//         font-size: 14px;\n//     }\n//   }\n\n//   button.nftDiv {\n//     border: none;\n//     background: none;\n//     cursor: pointer;\n//     padding: 10px;\n//     background-color: #141414;\n//     border-radius: 20px;\n//     color: white;\n//     box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n//     display: flex;\n//     flex-direction: column;\n//     align-items: center;\n//     justify-content: center;\n//     gap: 10px;\n//     width: 140px; // adjust as necessary\n//   }\n\n//   button.nftDiv img {\n//     width: 100%;\n//     border-radius: 10px;\n//   }\n\n//   button.nftDiv p {\n//     font-size: 14px;\n//   }\n\n// `;\n\n// export default function ShowNfts() {\n//   const [nfts, setNfts] = useState([]);\n//   const [user, setUser] = useState({ loggedIn: false, addr: undefined });\n//   const [selectedNft, setSelectedNft] = useState(null);\n\n// \tuseEffect(() => {\n//     fcl.currentUser.subscribe(setUser);\n//     getNFTs(user.addr)\n//   }, [user.addr]);\n\n//   async function getNFTs(addr) {\n//     try {\n//       const result = await fcl.query({\n//         cadence: `\n//                 import FlowTutorialMint from 0x0822a39d2b1cb404\n//                 import MetadataViews from 0x631e88ae7f1d7c20\n\n//                 pub fun main(address: Address): [FlowTutorialMint.FlowTutorialMintData] {\n//                   let collection = getAccount(address).getCapability(FlowTutorialMint.CollectionPublicPath)\n//                                     .borrow<&{MetadataViews.ResolverCollection}>()\n//                                     ?? panic(\"Could not borrow a reference to the nft collection\")\n\n//                   let ids = collection.getIDs()\n\n//                   let answer: [FlowTutorialMint.FlowTutorialMintData] = []\n\n//                   for id in ids {\n\n//                     let nft = collection.borrowViewResolver(id: id)\n//                     let view = nft.resolveView(Type<FlowTutorialMint.FlowTutorialMintData>())!\n\n//                     let display = view as! FlowTutorialMint.FlowTutorialMintData\n//                     answer.append(display)\n//                   }\n\n//                   return answer\n//                 }\n//                 `,\n//         args: (arg, t) => [arg(addr, t.Address)],\n//       });\n//       setNfts(result);\n//     } catch (error) {\n//       console.log(\"err\", error);\n//     }\n//   }\n\n//   const handleNftClick = (nftId) => {\n//     setSelectedNft(nftId);\n//   };\n\n//   const handleCloseModal = () => {\n//     setSelectedNft(null);\n//   };\n\n//   return (\n//     <Wrapper>\n//       <h1>My NFTs</h1>\n//       <main>\n//         <button onClick={() => getNFTs(user.addr)}>Get NFTs</button>\n//         <section>\n//           {nfts.map((nft, index) => {\n//             return (\n//               <button key={index} className=\"nftDiv\" onClick={() => handleNftClick(nft.id)}>\n//                 <img src={nft.url} alt=\"nft\" />\n//                 <p>Type: {nft.type}</p>\n//                 <p>Id: {nft.id}</p>\n//               </button>\n//             );\n//           })}\n//         </section>\n//       </main>\n\n//       {selectedNft && (\n//         <Modal nftId={selectedNft} onClose={handleCloseModal} />\n//       )}\n//     </Wrapper>\n//   );\n\n// }\n\nimport * as fcl from \"@onflow/fcl\";\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Modal from \"./Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  \n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n  padding: 50px;\n\n  button {\n    width: 100px;\n    padding: 10px;\n    border: none;\n    background-color: #8dfe89;\n    border-radius: 10px;\n    font-weight: 700;\n    &:hover {\n      color: white;\n      background-color: black;\n      cursor: pointer;\n    }\n  }\n\n  section {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 30px;\n    \n  }\n\n  .nftDiv{\n    \n    background-color: #141414;\n    border-radius: 20px;\n    color: white;\n    \n    img{\n        width: 140px;\n        border-radius: 10px;\n    }\n    p{\n        font-size: 14px;\n    }\n  }\n\n  button.nftDiv {\n    border: none;\n    background: none;\n    cursor: pointer;\n    padding: 10px;\n    background-color: #141414;\n    border-radius: 20px;\n    color: white;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    width: 140px; // adjust as necessary\n  }\n  \n  button.nftDiv img {\n    width: 100%;\n    border-radius: 10px;\n  }\n  \n  button.nftDiv p {\n    font-size: 14px;\n  }\n\n  @media (max-width: 1280px) {\n    padding: 16px;\n  }\n\n  @media (max-width: 800px) {\n    padding-bottom: 50px;\n  }\n  \n`;\n_c = Wrapper;\nconst IframeContainer = styled.div`\n  position: relative;\n  width: 100%; // This will make the iframe responsive\n  padding-top: 70%; // This is based on the aspect ratio 16:9 (9/16 = 0.5625)\n  margin-bottom: 100px;\n  overflow: hidden;\n\n  iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: none; // This line removes the border\n  }\n\n  @media (max-width: 800px) {\n    padding-top: 100%;\n  }\n`;\n_c2 = IframeContainer;\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0); // Semi-transparent overlay\n  display: flex;\n  z-index: 9;\n  justify-content: center;\n  align-items: center;\n  cursor: not-allowed;\n`;\n_c3 = Overlay;\nexport default function ShowNfts() {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [user, setUser] = useState({\n    loggedIn: false,\n    addr: undefined\n  });\n  const [selectedNft, setSelectedNft] = useState(null);\n  useEffect(() => {\n    fcl.currentUser.subscribe(setUser);\n    getNFTs(user.addr);\n  }, [user.addr]);\n  async function getNFTs(addr) {\n    try {\n      const result = await fcl.query({\n        cadence: `\n                import FlowTutorialMint from 0x0822a39d2b1cb404\n                import MetadataViews from 0x631e88ae7f1d7c20\n                \n                pub fun main(address: Address): [FlowTutorialMint.FlowTutorialMintData] {\n                  let collection = getAccount(address).getCapability(FlowTutorialMint.CollectionPublicPath)\n                                    .borrow<&{MetadataViews.ResolverCollection}>()\n                                    ?? panic(\"Could not borrow a reference to the nft collection\")\n                \n                  let ids = collection.getIDs()\n                \n                  let answer: [FlowTutorialMint.FlowTutorialMintData] = []\n                \n                  for id in ids {\n                    \n                    let nft = collection.borrowViewResolver(id: id)\n                    let view = nft.resolveView(Type<FlowTutorialMint.FlowTutorialMintData>())!\n                \n                    let display = view as! FlowTutorialMint.FlowTutorialMintData\n                    answer.append(display)\n                  }\n                    \n                  return answer\n                }\n                `,\n        args: (arg, t) => [arg(addr, t.Address)]\n      });\n      setNfts(result);\n    } catch (error) {\n      console.log(\"err\", error);\n    }\n  }\n  const handleCloseModal = () => {\n    setSelectedNft(null);\n  };\n  const handleOverlayClick = () => {\n    if (nfts.length === 0) {\n      alert('You need to mint the NFT to access.');\n    }\n  };\n  const contracAddress = \"0x0822a39d2b1cb404\";\n  const iframeSrc = `https://staging.darkblock.io/platform/flow/embed/nft/${contracAddress}/2/<epoch>_<signature>/<address>`;\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {},\n      children: \"Token-bound Content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IframeContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"iframe\", {\n        src: iframeSrc,\n        title: \"NFT\",\n        width: \"100%\",\n        height: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), nfts.length === 0 && /*#__PURE__*/_jsxDEV(Overlay, {\n        onClick: handleOverlayClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), selectedNft && /*#__PURE__*/_jsxDEV(Modal, {\n      nftId: selectedNft,\n      onClose: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 5\n  }, this);\n}\n_s(ShowNfts, \"TSIYIrwmkAYLNz71PAT76oF6gZg=\");\n_c4 = ShowNfts;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"IframeContainer\");\n$RefreshReg$(_c3, \"Overlay\");\n$RefreshReg$(_c4, \"ShowNfts\");","map":{"version":3,"names":["fcl","useState","useEffect","styled","Modal","jsxDEV","_jsxDEV","Wrapper","div","_c","IframeContainer","_c2","Overlay","_c3","ShowNfts","_s","nfts","setNfts","user","setUser","loggedIn","addr","undefined","selectedNft","setSelectedNft","currentUser","subscribe","getNFTs","result","query","cadence","args","arg","t","Address","error","console","log","handleCloseModal","handleOverlayClick","length","alert","contracAddress","iframeSrc","children","style","fileName","_jsxFileName","lineNumber","columnNumber","src","title","width","height","onClick","nftId","onClose","_c4","$RefreshReg$"],"sources":["/Users/oqpo/Documents/GitHub/darkblock-flow/src/components/ShowNfts.jsx"],"sourcesContent":["// import * as fcl from \"@onflow/fcl\";\n// import { useState, useEffect } from \"react\";\n// import styled from \"styled-components\";\n// import { Fragment } from \"react\";\n// import Modal from \"./Modal\";\n\n// const Wrapper = styled.div`\n//   background-color: #e5e5e5;\n//   display: flex;\n//   flex-direction: column;\n//   gap: 10px;\n//   align-items: center;\n//   justify-content: center;\n//   padding: 50px;\n\n//   button {\n//     width: 100px;\n//     padding: 10px;\n//     border: none;\n//     background-color: #8dfe89;\n//     border-radius: 10px;\n//     font-weight: 700;\n//     &:hover {\n//       color: white;\n//       background-color: black;\n//       cursor: pointer;\n//     }\n//   }\n\n//   section {\n//     display: flex;\n//     justify-content: center;\n//     align-items: center;\n//     flex-wrap: wrap;\n//     gap: 30px;\n//     padding: 10%;\n//   }\n\n//   .nftDiv{\n//     padding: 10px;\n//     background-color: #141414;\n//     border-radius: 20px;\n//     color: white;\n//     box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n//     img{\n//         width: 140px;\n//         border-radius: 10px;\n//     }\n//     p{\n//         font-size: 14px;\n//     }\n//   }\n\n//   button.nftDiv {\n//     border: none;\n//     background: none;\n//     cursor: pointer;\n//     padding: 10px;\n//     background-color: #141414;\n//     border-radius: 20px;\n//     color: white;\n//     box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n//     display: flex;\n//     flex-direction: column;\n//     align-items: center;\n//     justify-content: center;\n//     gap: 10px;\n//     width: 140px; // adjust as necessary\n//   }\n  \n//   button.nftDiv img {\n//     width: 100%;\n//     border-radius: 10px;\n//   }\n  \n//   button.nftDiv p {\n//     font-size: 14px;\n//   }\n  \n// `;\n\n// export default function ShowNfts() {\n//   const [nfts, setNfts] = useState([]);\n//   const [user, setUser] = useState({ loggedIn: false, addr: undefined });\n//   const [selectedNft, setSelectedNft] = useState(null);\n\n// \tuseEffect(() => {\n//     fcl.currentUser.subscribe(setUser);\n//     getNFTs(user.addr)\n//   }, [user.addr]);\n\n//   async function getNFTs(addr) {\n//     try {\n//       const result = await fcl.query({\n//         cadence: `\n//                 import FlowTutorialMint from 0x0822a39d2b1cb404\n//                 import MetadataViews from 0x631e88ae7f1d7c20\n                \n//                 pub fun main(address: Address): [FlowTutorialMint.FlowTutorialMintData] {\n//                   let collection = getAccount(address).getCapability(FlowTutorialMint.CollectionPublicPath)\n//                                     .borrow<&{MetadataViews.ResolverCollection}>()\n//                                     ?? panic(\"Could not borrow a reference to the nft collection\")\n                \n//                   let ids = collection.getIDs()\n                \n//                   let answer: [FlowTutorialMint.FlowTutorialMintData] = []\n                \n//                   for id in ids {\n                    \n//                     let nft = collection.borrowViewResolver(id: id)\n//                     let view = nft.resolveView(Type<FlowTutorialMint.FlowTutorialMintData>())!\n                \n//                     let display = view as! FlowTutorialMint.FlowTutorialMintData\n//                     answer.append(display)\n//                   }\n                    \n//                   return answer\n//                 }\n//                 `,\n//         args: (arg, t) => [arg(addr, t.Address)],\n//       });\n//       setNfts(result);\n//     } catch (error) {\n//       console.log(\"err\", error);\n//     }\n//   }\n\n//   const handleNftClick = (nftId) => {\n//     setSelectedNft(nftId);\n//   };\n\n//   const handleCloseModal = () => {\n//     setSelectedNft(null);\n//   };\n\n\n//   return (\n//     <Wrapper>\n//       <h1>My NFTs</h1>\n//       <main>\n//         <button onClick={() => getNFTs(user.addr)}>Get NFTs</button>\n//         <section>\n//           {nfts.map((nft, index) => {\n//             return (\n//               <button key={index} className=\"nftDiv\" onClick={() => handleNftClick(nft.id)}>\n//                 <img src={nft.url} alt=\"nft\" />\n//                 <p>Type: {nft.type}</p>\n//                 <p>Id: {nft.id}</p>\n//               </button>\n//             );\n//           })}\n//         </section>\n//       </main>\n  \n//       {selectedNft && (\n//         <Modal nftId={selectedNft} onClose={handleCloseModal} />\n//       )}\n//     </Wrapper>\n//   );\n  \n  \n// }\n\n\n\n\nimport * as fcl from \"@onflow/fcl\";\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Modal from \"./Modal\";\n\nconst Wrapper = styled.div`\n  \n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n  padding: 50px;\n\n  button {\n    width: 100px;\n    padding: 10px;\n    border: none;\n    background-color: #8dfe89;\n    border-radius: 10px;\n    font-weight: 700;\n    &:hover {\n      color: white;\n      background-color: black;\n      cursor: pointer;\n    }\n  }\n\n  section {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 30px;\n    \n  }\n\n  .nftDiv{\n    \n    background-color: #141414;\n    border-radius: 20px;\n    color: white;\n    \n    img{\n        width: 140px;\n        border-radius: 10px;\n    }\n    p{\n        font-size: 14px;\n    }\n  }\n\n  button.nftDiv {\n    border: none;\n    background: none;\n    cursor: pointer;\n    padding: 10px;\n    background-color: #141414;\n    border-radius: 20px;\n    color: white;\n    box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.25);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    width: 140px; // adjust as necessary\n  }\n  \n  button.nftDiv img {\n    width: 100%;\n    border-radius: 10px;\n  }\n  \n  button.nftDiv p {\n    font-size: 14px;\n  }\n\n  @media (max-width: 1280px) {\n    padding: 16px;\n  }\n\n  @media (max-width: 800px) {\n    padding-bottom: 50px;\n  }\n  \n`;\n\nconst IframeContainer = styled.div`\n  position: relative;\n  width: 100%; // This will make the iframe responsive\n  padding-top: 70%; // This is based on the aspect ratio 16:9 (9/16 = 0.5625)\n  margin-bottom: 100px;\n  overflow: hidden;\n\n  iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: none; // This line removes the border\n  }\n\n  @media (max-width: 800px) {\n    padding-top: 100%;\n  }\n`;\n\n\n\nconst Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0); // Semi-transparent overlay\n  display: flex;\n  z-index: 9;\n  justify-content: center;\n  align-items: center;\n  cursor: not-allowed;\n`;\n\n\nexport default function ShowNfts() {\n  const [nfts, setNfts] = useState([]);\n  const [user, setUser] = useState({ loggedIn: false, addr: undefined });\n  const [selectedNft, setSelectedNft] = useState(null);\n\n  useEffect(() => {\n    fcl.currentUser.subscribe(setUser);\n    getNFTs(user.addr);\n  }, [user.addr]);\n\n  async function getNFTs(addr) {\n    try {\n      const result = await fcl.query({\n        cadence: `\n                import FlowTutorialMint from 0x0822a39d2b1cb404\n                import MetadataViews from 0x631e88ae7f1d7c20\n                \n                pub fun main(address: Address): [FlowTutorialMint.FlowTutorialMintData] {\n                  let collection = getAccount(address).getCapability(FlowTutorialMint.CollectionPublicPath)\n                                    .borrow<&{MetadataViews.ResolverCollection}>()\n                                    ?? panic(\"Could not borrow a reference to the nft collection\")\n                \n                  let ids = collection.getIDs()\n                \n                  let answer: [FlowTutorialMint.FlowTutorialMintData] = []\n                \n                  for id in ids {\n                    \n                    let nft = collection.borrowViewResolver(id: id)\n                    let view = nft.resolveView(Type<FlowTutorialMint.FlowTutorialMintData>())!\n                \n                    let display = view as! FlowTutorialMint.FlowTutorialMintData\n                    answer.append(display)\n                  }\n                    \n                  return answer\n                }\n                `,\n        args: (arg, t) => [arg(addr, t.Address)],\n      });\n      \n      setNfts(result);\n    } catch (error) {\n      console.log(\"err\", error);\n    }\n  }\n\n  const handleCloseModal = () => {\n    setSelectedNft(null);\n  };\n\n  const handleOverlayClick = () => {\n    if (nfts.length === 0) {\n      alert('You need to mint the NFT to access.');\n    }\n  };\n\n  const contracAddress = \"0x0822a39d2b1cb404\";\n  const iframeSrc = `https://staging.darkblock.io/platform/flow/embed/nft/${contracAddress}/2/<epoch>_<signature>/<address>`;\n\n  return (\n    <Wrapper>\n      <h1 style={{}}>Token-bound Content</h1>\n      <IframeContainer>\n        <iframe src={iframeSrc} title=\"NFT\" width=\"100%\" height=\"100%\"></iframe>\n        {nfts.length === 0 && (\n          <Overlay onClick={handleOverlayClick}></Overlay>\n        )}\n      </IframeContainer>\n\n      {selectedNft && (\n        <Modal nftId={selectedNft} onClose={handleCloseModal} />\n      )}\n    </Wrapper>\n  );\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAKA,OAAO,KAAKA,GAAG,MAAM,aAAa;AAClC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,OAAO,GAAGJ,MAAM,CAACK,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}