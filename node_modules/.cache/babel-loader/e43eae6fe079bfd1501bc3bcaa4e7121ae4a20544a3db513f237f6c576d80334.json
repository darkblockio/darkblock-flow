{"ast":null,"code":"import { config } from '@onflow/config';\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nconst LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1\n});\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = _ref => {\n  let {\n    title,\n    message\n  } = _ref;\n  return [`\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `.replace(/\\n[^\\S\\r\\n]+/g, \"\\n\").trim(),, \"font-weight:bold;font-family:monospace;\"];\n};\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nconst log = async _ref2 => {\n  let {\n    title,\n    message,\n    level,\n    always = false\n  } = _ref2;\n  const configLoggerLevel = await config.get(\"logger.level\", LEVELS.warn);\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return;\n  const loggerMessageArgs = buildLoggerMessageArgs({\n    title,\n    message\n  });\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs);\n      break;\n    case LEVELS.info:\n      console.info(...loggerMessageArgs);\n      break;\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs);\n      break;\n    case LEVELS.error:\n      console.error(...loggerMessageArgs);\n      break;\n    default:\n      console.log(...loggerMessageArgs);\n  }\n};\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = _ref3 => {\n  let {\n    pkg,\n    subject,\n    transition,\n    level = LEVELS.warn,\n    message = \"\",\n    callback = null\n  } = _ref3;\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  const logMessage = () => log({\n    title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n    message: `\n      ${subject ? `${capitalizeFirstLetter(subject)} is deprecated and will cease to work in future releases${pkg ? \" of \" + pkg : \"\"}.` : \"\"}${message ? \"\\n\" + message : \"\"}${transition ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}` : \"\"}\n    `.trim(),\n    level\n  });\n  if (typeof callback === \"function\") {\n    return async function () {\n      await logMessage();\n      return await callback(...arguments);\n    };\n  }\n  return logMessage();\n};\nexport { LEVELS, log };","map":{"version":3,"names":["LEVELS","Object","freeze","debug","info","log","warn","error","buildLoggerMessageArgs","_ref","title","message","replace","trim","_ref2","level","always","configLoggerLevel","config","get","loggerMessageArgs","console","deprecate","_ref3","pkg","subject","transition","callback","capitalizeFirstLetter","string","charAt","toUpperCase","slice","logMessage","arguments"],"sources":["/Users/oqpo/Documents/GitHub/darkblock-flow/node_modules/@onflow/util-logger/src/util-logger.js"],"sourcesContent":["import {config} from \"@onflow/config\"\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nexport const LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1,\n})\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = ({title, message}) => {\n  return [\n    `\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `\n      .replace(/\\n[^\\S\\r\\n]+/g, \"\\n\")\n      .trim(),\n    ,\n    \"font-weight:bold;font-family:monospace;\",\n  ]\n}\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nexport const log = async ({title, message, level, always = false}) => {\n  const configLoggerLevel = await config.get(\"logger.level\", LEVELS.warn)\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return\n\n  const loggerMessageArgs = buildLoggerMessageArgs({title, message})\n\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs)\n      break\n    case LEVELS.info:\n      console.info(...loggerMessageArgs)\n      break\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs)\n      break\n    case LEVELS.error:\n      console.error(...loggerMessageArgs)\n      break\n    default:\n      console.log(...loggerMessageArgs)\n  }\n}\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = ({\n  pkg,\n  subject,\n  transition,\n  level = LEVELS.warn,\n  message = \"\",\n  callback = null,\n}) => {\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n  }\n\n  const logMessage = () =>\n    log({\n      title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n      message: `\n      ${\n        subject\n          ? `${capitalizeFirstLetter(\n              subject\n            )} is deprecated and will cease to work in future releases${\n              pkg ? \" of \" + pkg : \"\"\n            }.`\n          : \"\"\n      }${message ? \"\\n\" + message : \"\"}${\n        transition\n          ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}`\n          : \"\"\n      }\n    `.trim(),\n      level,\n    })\n\n  if (typeof callback === \"function\") {\n    return async (...args) => {\n      await logMessage()\n      return await callback(...args)\n    }\n  }\n  return logMessage()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}